Задания к работе №7 по фундаментальным алгоритмам.

1. Необходимо написать программу, которая принимает на вход файл, в котором
записано стихотворение любого русского (можно и нерусского) поэта и выдавать на
выходе другой файл, который будет содержать то же стихотворение, в котором все
слова заменены на произвольные слова с эквивалентным числом слогов, выбранные
из обратного словаря русских слов (http://www.speakrus.ru/dict/), по возможности с
сохранением рифмы. Передача аргументов в программу происходит через
командную строку.

2. Разработайте программу для подмены слов в тексте. На вход программе подаются
текстовые файлы, и на основании словаря синонимов, в каждом файле происходит
подмена синонимичного понятия на эталонное. Словарь синонимов – это набор
записей вида <эталонное слово> {список синонимов}. При обработке текста
выполняется поиск слова по словарю, если оно эталонное, то замену производить не
надо, если синоним, то выполнить его замену на соответствующий эталон.
Обработка файлов происходит в двух режимах: автоматическом и обучающем. В
автоматическом режиме ненайденные в словаре слова игнорируются и, затем, все не
заменённые слова сохраняются в файл; в обучающем режиме для каждого слова,
которого не оказалось в словаре выполняется его занесение в словарь: либо
добавление к списку синонимов существующего эталонного слова, либо создание
нового эталонного слова, либо замена существующего эталонного слова. При
завершении программы сохраняйте словарь синонимов, при запуске загружайте
ранее сохраненный словарь. Примечание. Ваша программа должна быть устойчива:
ни при каких обстоятельствах она не должна аварийно завершаться. Для
демонстрации работы используйте содержательный словарь синонимов (>100
записей), по вашему выбору, входные файлы могут быть с английским текстом или
с русским.

3. Напишите программу для анализа последовательности вызовов функции
(подпрограмм) для некоторого языка программирования (вы можете использовать
конкретный синтаксис C, C++, python, C#, java). На вход программе подается список
текстовых файлов (кодов программ), считаем, что исполнение кода начинается с
первого файла в списке, порядок остальных файлов не важен. Ваша программа
должна определить все вызываемые функции (методы, подпрограммы), построить
дерево вызовов для каждой функции, найти рекурсивные функции, для каждой
такой функции вывести цепочку вызовов функции, приводящей к рекурсии. Так же
необходимо определить все не определенные функции. В передаваемых файлах
могут присутствовать директивы подключения других файлов (#include, import,
using, …), поиск функции необходимо осуществлять только в передаваемых файлах.
Обработайте некоторые типичные ошибки: отсутствие импортируемого файла,
неверное количество аргументов у функции. Примечание. Считаем, что грубых
синтаксических ошибок в файлах нет: скобки расставлены корректно, типы
передаваемых и возвращаемых аргументов корректны, нет потерянных параметров.
Все функции имеют фиксированное количество параметров, параметров по
умолчанию нет.

4. В файле находятся служебные записи о деятельности сотрудников некоторой
фирмы. Записи имеют следующий формат:
Фамилия Имя Отчество
{
Договор №1 нач. 01.01.2018 кон. 02.03.2018 Работа 123 Стоимость 12500;
Договор №12 нач. 18.04.2019 кон. 20.06.2019 Работа 1234 Стоимость 1550;
…
Договор №14 нач. 19.05.2019 кон. нв Работа 1235 Стоимость 17500;
}
Количество записей не фиксировано, количество информационных полей в
каждой записи также не фиксировано. Напишите программу, которая обрабатывает
этот текстовый файл, формируя красно-черное дерево, в узлах которого находятся
указатели на записи, считанные из файла. Ключевым полем каждой записи является
ФИО. Ваша программа должна предоставить опцию для заданного сотрудника
подсчёта стоимость всех Договоров; выдачи списка договоров, с которыми работал
заданный сотрудник. Далее, необходимо найти самый продолжительный договор,
самый дорогой договор. Необходимо так же реализовать удаление информации о
сотруднике.

5. На вход программе подаются файлы с данными диалогов пользователей некой
социальной сети. Формат файла имеет следующий вид:
<user name> <time>: <message>, при этом временная метка <time> имеет точность до
миллисекунд. Поле <message> имеет произвольный размер. Обработайте
поступающие файлы с помощью AVL дерева. В узлах дерева храните указатели на
сообщения пользователей с необходимыми атрибутами. В качестве ключевого поля,
по которому будет выполняться сравнение, используйте <user name> <time>. Ваша
программа должна иметь опции: вывод всех сообщений заданного пользователя,
вывод сообщений пользователя для заданного временного интервала и вывод всех
сообщений из заданного временного интервала. Реализуйте опции удаления
заданного сообщения и удаление сообщений заданного пользователя.